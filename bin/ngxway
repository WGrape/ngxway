#!/usr/bin/env bash

# Go back to the root directory of ngxway.
ngxwayPath=$(cd `dirname $0`; cd ..; pwd)
cd $ngxwayPath

# Require the common shell scripts.
. $ngxwayPath/scripts/common.sh

whichSystem=$(printWhichSystem)

# Start the server.
function start(){
  # Detect whether docker is started by commands such as docker images, and redirect the output so that the content will not be output on the console
  docker images > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    printError "error: please start docker first"
    exit 1
  fi

  # Handle container.
  containerCount=0
  for file in $(docker container ls -f name=ngxwayContainer -q)
  do
      ((containerCount++))
  done
  if [ $containerCount -ne 0 ]; then
    printError "error: please run stop.sh first"
    exit 1
  fi

  # Pull without password.
  git config --global credential.helper store
  git pull

  # Build image.
  docker build -t ngxway .
  if [ $? -ne 0 ]; then
    printError "error: failed to build"
    exit 1
  fi

  # Mapping to local disk storage.
  mkdir -p $localVolumeLogsDir && chmod -R 777 $localVolumeLogsDir

  # Adjust system parameters and run container.
  if [ $dockerNetwork == "bridge" ] || [ $whichSystem != "Linux" ]; then
      docker run --ulimit nofile=$softNoFile:$hardNoFile \
                 --sysctl net.ipv4.ip_local_port_range="$ipLocalPortRange" \
                 --sysctl net.core.somaxconn="$soMaxConn" \
                 --cpus=$maxNCPU \
                 --name ngxwayContainer -d -p $ngxwayAddr:8090 -p 8000:8000 -v $localVolumeLogsDir:/dist/logs/ ngxway
      if [ $? -ne 0 ]; then
        printError "error: failed to run"
        exit 1
      fi
  elif [ $dockerNetwork == "host" ]; then
      docker run --ulimit nofile=$softNoFile:$hardNoFile \
                 --cpus=$maxNCPU \
                 --name ngxwayContainer -d --net=host -v $localVolumeLogsDir:/dist/logs/ ngxway
      if [ $? -ne 0 ]; then
        printError "error: failed to run"
        exit 1
      fi
  fi

  # Exec command: start the go server.
  if [ $env == "dev" ]; then
      printInfo "DEV ONLY START"

      # install httpd-tools to use ab test,
      docker exec -it ngxwayContainer /bin/bash -c 'yum install -y httpd-tools'

      # build go server
      docker exec -it ngxwayContainer /bin/bash -c 'cd /dist/example/goserver/ && bash build.sh && cd /'
      if [ $? -ne 0 ]; then
        printError "error: failed to build goserver"
        exit 1
      fi

      # run go server
      docker exec -d ngxwayContainer /dist/example/goserver/goserver
      if [ $? -ne 0 ]; then
        printError "error: failed to exec goserver"
        exit 1
      fi

      printInfo "DEV ONLY END"
  fi

  # Exec command: reload the nginx.
  docker exec -d ngxwayContainer bash /dist/scripts/nginx/nginx_reload.sh
  if [ $? -ne 0 ]; then
    printError "error: failed to exec nginx_reload.sh"
    exit 1
  fi

  # The result of command exec in docker.
  # wait the log of docker sync to local disk.
  sleep 1
  dockerResultMsg=$(cat $localVolumeLogsDir/nginx.reload.log)
  if [ "${dockerResultMsg}" != "success" ] ; then
    # Write failure log.
    log="[${time}] >>>>>>>>failed to reload nginx<<<<<<<<"
    echo $log >> $localVolumeLogsDir/ngxway.start.log
    echo $dockerResultMsg >> $localVolumeLogsDir/ngxway.start.log

    # Output to console.
    printError "error: failed to reload nginx"
    printError "error: $dockerResultMsg"
    exit 1
  else
    # Write success log.
    log="[${time}] start ngxway success"
    echo $log >> $localVolumeLogsDir/ngxway.start.log

    # Output to console.
    printLogo
    printSuccess "Welcome to ngxway ! It's listening on ${ngxwayAddr} ..."
  fi

  # Try to open it in your chrome if ngxway working in dev mode.
  computeSignedRequest
  if [ $env == "dev" ]; then
    open -a "/Applications/Google Chrome.app" $signedURL > /dev/null 2>&1
  fi
}

# Stop the server.
function stop(){
  # Detect whether docker is started by commands such as docker images, and redirect the output so that the content will not be output on the console.
  docker images > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    printError "error: please start docker first"
    exit 1
  fi

  # Stop and remove container.
  docker stop ngxwayContainer
  docker container rm ngxwayContainer

  # Remove image.
  docker rmi ngxway

  # Remove local volume logs.
  rm -rf $localVolumeLogsDir

  printSuccess "stop success"
}

# Restart the server.
function restart(){
  stop && start
}

# Parse the arguments.
if [ "$1" == "start" ] ; then
  start
elif [ "$1" == "stop" ] ; then
  stop
elif [ "$1" == "restart" ] ; then
  restart
else
  echo "not support argument"
fi

exit 0
