--[[
Name: auth.lua
Author: WGrape
Copyright: (c) WGrape, 2022
License: MIT License
Description: This lua script is authentication module.
--]]

local auth = {}

-- check the timestamp is valid.
-- the params passed by the user.
function auth:check_params(sign, timestamp, timestamp_number)
  if sign == nil or timestamp == nil or timestamp_number == nil or timestamp_number <= 0 then
    return false
  end

  return true
end

-- compute the signature of request url.
function auth:compute_sign(timestamp_string, timestamp_number)
  -- the secret passed by the front end cannot be defined by constants, but generated by certain function rules to prevent the client code from being reversely parsed.
  local secret = "ngxway"

  -- sign = md5(md5("timestamp_secret_timestamp"))
  -- sign = Take the first [10, 25] bits of sign.
  local k = table.concat({ timestamp_string, "_", secret, "_", timestamp_string })
  local length = timestamp_number % 16 + 10
  local md5K = ngx.md5(k)
  return md5K:sub(1, length)
end

-- check the url signature is right.
function auth:check_sign(sign, timestamp_string, timestamp_number)
  -- generate real signatures.
  local realSign = auth:compute_sign(timestamp_string, timestamp_number)

  -- check whether the signatures are consistent.
  return realSign == sign
end

-- check the timestamp is valid.
function auth:check_timestamp(now_timestamp, timestamp_number)
  -- If the timestamp difference is within 1 hour, it is considered a normal request, otherwise it is considered a malicious request.
  return now_timestamp - timestamp_number < 3600
end

-- if the session is not empty, check whether the request signature is legal.
function auth:check_auth()
  local now_time = os.time()
  local sign = ngx.var.arg_sign
  local session = ngx.var.arg_session
  local timestamp_string = ngx.var.arg_timestamp
  local timestamp_number = tonumber(timestamp_string)

  if session == "" or session == nil then
    -- check whether the parameters are normal.
    if auth:check_params(sign, timestamp_string, timestamp_number) == false then
      ngx.log(ngx.ERR, 'check params failed')
      return false
    end

    -- prevent users from swiping the api.
    -- so if the signature verification fails, the request is rejected directly.
    if auth:check_sign(sign, timestamp_string, timestamp_number) == false then
      ngx.log(ngx.ERR, 'check sign failed')
      return false
    end

    -- prevent user recall attacks.
    -- so if the timestamp differs greatly from the server, the request is rejected directly.
    if auth:check_timestamp(now_time, timestamp_number) == false then
      ngx.log(ngx.ERR, 'check timestamp failed')
      return false
    end
  end

  return true
end

return auth
