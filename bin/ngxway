#!/usr/bin/env bash

# go to the root directory of ngxway.
NGXWAY_BASE_PATH=$(cd `dirname $0`; cd ..; pwd)
cd $NGXWAY_BASE_PATH

# require the common shell scripts.
. $NGXWAY_BASE_PATH/scripts/common.sh

which_system=$(print_which_system)

# start the server.
function start(){
  # Detect whether docker is started by commands such as docker images, and redirect the output so that the content will not be output on the console
  docker images > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    print_error "error: please start docker first"
    exit 1
  fi

  # if there is a running container, an error is reported.
  container_count=0
  for file in $(docker container ls -f name=ngxway_container -q)
  do
      ((container_count++))
  done
  if [ $container_count -ne 0 ]; then
    print_error "error: please run stop.sh first"
    exit 1
  fi

  # pull without password.
  git config --global credential.helper store
  git pull

  # build image.
  docker build -t ngxway .
  if [ $? -ne 0 ]; then
    print_error "error: failed to build"
    exit 1
  fi

  # mapping to local disk storage.
  mkdir -p $local_volume_logs_dir && chmod -R 777 $local_volume_logs_dir

  # adjust system parameters and run container.
  if [ "$docker_network" == "bridge" ] || [ "$which_system" != "Linux" ]; then
      docker run --ulimit nofile=$soft_no_file:$hard_no_file \
                 --sysctl net.ipv4.ip_local_port_range="$ip_local_port_range" \
                 --sysctl net.core.somaxconn="$so_max_conn" \
                 --name ngxway_container -d -p $ngxway_addr:8090 -v $local_volume_logs_dir:/dist/logs/ ngxway
      if [ $? -ne 0 ]; then
        print_error "error: failed to run"
        exit 1
      fi
  elif [ $docker_network == "host" ]; then
      docker run --ulimit nofile=$soft_no_file:$hard_no_file \
                 --name ngxway_container -d --net=host -v $local_volume_logs_dir:/dist/logs/ ngxway
      if [ $? -ne 0 ]; then
        print_error "error: failed to run"
        exit 1
      fi
  fi

  # exec development operations
  if [ $env == "dev" ]; then
      print_info "DEV ONLY START"
      bash $NGXWAY_BASE_PATH/scripts/devkit.sh
      print_info "DEV ONLY END"
  fi

  # exec extension operations
  if [ $ext_enable == "1" ]; then
      print_info "EXTENSION START"
      bash $NGXWAY_BASE_PATH/scripts/extkit.sh
      print_info "EXTENSION END"
  fi

  # exec command: reload the nginx.
  docker exec -d ngxway_container bash /dist/scripts/nginx/nginx_reload.sh
  if [ $? -ne 0 ]; then
    print_error "error: failed to exec nginx_reload.sh"
    exit 1
  fi

  # wait for the container's logs to be synced to the local disk.
  sleep 1

  # check the volume mount is success or not.
  if [ ! -f "$local_volume_logs_dir/nginx.reload.log" ]; then
    print_error "error: volume mount error"
    exit 1
  fi

  # the result of command exec in docker.
  dockerResultMsg=$(cat $local_volume_logs_dir/nginx.reload.log)
  if [ "${dockerResultMsg}" != "success" ] ; then
    # write failure log.
    log="[${time}] >>>>>>>>failed to reload nginx<<<<<<<<"
    echo $log >> $local_volume_logs_dir/ngxway.start.log
    echo $dockerResultMsg >> $local_volume_logs_dir/ngxway.start.log

    # output to console.
    print_error "error: failed to reload nginx"
    if [ "$dockerResultMsg" != "" ]; then
      print_error "error: $dockerResultMsg"
    fi
    exit 1
  else
    # write success log.
    log="[${time}] start ngxway success"
    echo $log >> $local_volume_logs_dir/ngxway.start.log

    # output to console.
    print_logo
    print_success "Welcome to ngxway ! It's listening on ${ngxway_addr} ..."
  fi

  # try to open it in your chrome if ngxway working in dev mode.
  compute_signed_request
  if [ $env == "dev" ]; then
    open -a "/Applications/Google Chrome.app" $signedURL > /dev/null 2>&1
  fi
}

# stop the server.
function stop(){
  # detect whether docker is started by commands such as docker images, and redirect the output so that the content will not be output on the console.
  docker images > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    print_error "error: please start docker first"
    exit 1
  fi

  # stop and remove container.
  docker stop ngxway_container
  docker container rm ngxway_container

  # remove image.
  docker rmi ngxway

  # remove local volume logs.
  rm -rf $local_volume_logs_dir

  print_success "stop success"
}

# restart the server.
function restart(){
  stop && start
}

# parse the sys arguments.
if [ "$1" == "start" ] ; then
  start
elif [ "$1" == "stop" ] ; then
  stop
elif [ "$1" == "restart" ] ; then
  restart
else
  echo "not support argument"
fi

exit 0
